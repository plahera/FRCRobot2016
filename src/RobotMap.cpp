// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::driveLeftDrive;
std::shared_ptr<CANTalon> RobotMap::driveRightDrive;
std::shared_ptr<RobotDrive> RobotMap::driveTankDrive;
std::shared_ptr<CANTalon> RobotMap::shooterSystemLeftShooterTalonLeft;
std::shared_ptr<Encoder> RobotMap::shooterSystemLeftQuadEncShooterLeft;
std::shared_ptr<CANTalon> RobotMap::intakeSubsystemIntakeTalon;
std::shared_ptr<CANTalon> RobotMap::shooterSystemRightShooterTalonRight;
std::shared_ptr<Encoder> RobotMap::shooterSystemRightQuadEncShooterRight;
std::shared_ptr<Servo> RobotMap::intakeSubsystemServoLeft;
std::shared_ptr<Servo> RobotMap::intakeSubsystemServoRight;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    driveLeftDrive.reset(new CANTalon(5));
    lw->AddActuator("Drive", "LeftDrive", driveLeftDrive);
    
    driveRightDrive.reset(new CANTalon(3));
    lw->AddActuator("Drive", "RightDrive", driveRightDrive);
    
    driveTankDrive.reset(new RobotDrive(driveLeftDrive, driveRightDrive));
    
    driveTankDrive->SetSafetyEnabled(true);
        driveTankDrive->SetExpiration(0.1);
        driveTankDrive->SetSensitivity(0.5);
        driveTankDrive->SetMaxOutput(1.0);

    shooterSystemLeftShooterTalonLeft.reset(new CANTalon(2));
    lw->AddActuator("ShooterSystemLeft", "ShooterTalonLeft", shooterSystemLeftShooterTalonLeft);
    
    shooterSystemLeftQuadEncShooterLeft.reset(new Encoder(9, 8, false, Encoder::k4X));
    lw->AddSensor("ShooterSystemLeft", "QuadEncShooterLeft", shooterSystemLeftQuadEncShooterLeft);
    shooterSystemLeftQuadEncShooterLeft->SetDistancePerPulse(1.0);
    shooterSystemLeftQuadEncShooterLeft->SetPIDSourceType(PIDSourceType::kRate);
    intakeSubsystemIntakeTalon.reset(new CANTalon(1));
    lw->AddActuator("IntakeSubsystem", "IntakeTalon", intakeSubsystemIntakeTalon);
    
    shooterSystemRightShooterTalonRight.reset(new CANTalon(4));
    lw->AddActuator("ShooterSystemRight", "ShooterTalonRight", shooterSystemRightShooterTalonRight);
    
    shooterSystemRightQuadEncShooterRight.reset(new Encoder(7, 6, false, Encoder::k4X));
    lw->AddSensor("ShooterSystemRight", "QuadEncShooterRight", shooterSystemRightQuadEncShooterRight);
    shooterSystemRightQuadEncShooterRight->SetDistancePerPulse(1.0);
    shooterSystemRightQuadEncShooterRight->SetPIDSourceType(PIDSourceType::kRate);

    intakeSubsystemServoLeft.reset(new Servo(0));
       lw->AddActuator("IntakeSubsystem", "ServoLeft", intakeSubsystemServoLeft);

       intakeSubsystemServoRight.reset(new Servo(1));
       lw->AddActuator("IntakeSubsystem", "ServoRight", intakeSubsystemServoRight);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
