// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Drive.h"
#include "../RobotMap.h"
#include "../Commands/DriveNormal.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drive::Drive() : Subsystem("Drive") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftDrive = RobotMap::driveLeftDrive;
    rightDrive = RobotMap::driveRightDrive;
    tankDrive = RobotMap::driveTankDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Drive::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new DriveNormal());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Drive::DriveMethod(float y, float x)
{

	tankDrive->ArcadeDrive(Drive::FinalAdjust(y), -1*Drive::FinalAdjust(x),false);
	//tankDrive->ArcadeDrive(Robot::oi->getDriveJoy()->GetY(),-1*Robot::oi->getDriveJoy()->GetX(), false);
	Wait(0.005);
}


float Drive::Adjust(float x)
{
	if (x>0)
	{
		return x*x/2.0;
	}
	else
	{
		return -1*x*x/2.0;
	}
}

float Drive::ThrottleAdjust(float x){
	float throt = Robot::oi->GetThrot();
	float throt2 = Robot::oi->GetThrot2();
	return  (1- throt*throt*.5)*(1+throt2*throt2);
}

float Drive::FinalAdjust(float x)
{
	return Drive::ThrottleAdjust(x)*Drive::Adjust(x);
}

void Drive::Stop()
{
	tankDrive->ArcadeDrive(0,0,false);
}
